/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package redes;

import java.awt.Frame;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author Jacobo
 */
public class NewJFrame extends javax.swing.JFrame {

    public String frase ="Redes de Computadoras ";
    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
           origen.setLineWrap(true);
        destino.setLineWrap(true);
        origen.setWrapStyleWord(true);
        destino.setWrapStyleWord(true);
    
        
      
      
 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        origen = new javax.swing.JTextArea();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        destino = new javax.swing.JTextArea();
        BtnTextBin = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Ingrese Texto");

        origen.setColumns(20);
        origen.setRows(5);
        jScrollPane1.setViewportView(origen);

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Resultado en binario");

        destino.setColumns(20);
        destino.setRows(5);
        jScrollPane2.setViewportView(destino);

        BtnTextBin.setText("Enviar ");
        BtnTextBin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnTextBinActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane4.setViewportView(jTextArea2);

        jLabel13.setText("Destino A");

        jLabel14.setText("Destino B");

        jButton1.setText("Envio a B");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Envio a A");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("jLabel1");

        jButton3.setText("Cambiar palabra");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel14)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(BtnTextBin)
                                .addComponent(jButton3)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel13))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel9))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(470, 470, 470)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 487, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 329, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(482, 482, 482)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7))
                        .addGap(473, 473, 473))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2))
                        .addGap(33, 33, 33)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel11)
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BtnTextBin, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addComponent(jButton3))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7)
                        .addGap(5, 5, 5)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)))
                .addGap(7, 279, Short.MAX_VALUE)
                .addComponent(jLabel1))
            .addGroup(layout.createSequentialGroup()
                .addGap(282, 282, 282)
                .addComponent(jScrollPane2)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnTextBinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnTextBinActionPerformed
        String texto = origen.getText();
 
        // String texto = origen.getText();
     destino.setText("");
        
        //String texto = "";
        //char[] letra;
        //  char [] letra = texto.toCharArray();
        //String texto="puto";
        String codigoBinario = "";//guarda el en binario
        // char letra;
        int contadorerror =0;
        int tam = texto.length();
        

      
           //if (texto.equals("Redes "))  {

                char ERRORES[] = new char[80];
                char palabrafrase[] = new char[80];
                ArrayList<String> cadenabinario = new ArrayList<String>();
                palabrafrase[0]='R';
                palabrafrase[1]='e';
                palabrafrase[2]='d';
                palabrafrase[3]='e';
                palabrafrase[4]='s';
                palabrafrase[5]=' ';
                palabrafrase[6]='d';
                palabrafrase[7]='e';
                palabrafrase[8]=' ';
                palabrafrase[9]='C';
                palabrafrase[10]='o';
                palabrafrase[11]='m';
                palabrafrase[12]='p';
                palabrafrase[13]='u';
                palabrafrase[14]='t';
                palabrafrase[15]='a';
                palabrafrase[16]='d';
                palabrafrase[17]='o';
                palabrafrase[18]='r';
                palabrafrase[19]='a';
                palabrafrase[20]='s';
                palabrafrase[21]=' ';
                
                
                
                cadenabinario.add("00110001011011100011000101100011");
                for (int i = 0; i < texto.length(); i++)

                {
                      
                    //recorre el texto ingresado
                    char letra = texto.charAt(i);//separa letra a letra

                    if(letra==palabrafrase[i])
                    {
                        ERRORES[i]='0';
                        
                    }
                    else
                    {
                        
                        ERRORES[i]='1';
                        contadorerror++;
                        
                        
                    }
                    
                    int aux = Binario((int) (letra)).length();//almacena largo del binario de la letra devuelta
                    for (int j = 0; j < 8; j++) {//recorrido de 8 characteres
                        if (aux < 8) {//si el largo del binario es menor a 7 (0-7)entonces

                            codigoBinario = codigoBinario + "0";//agregar 0 a la concadenacion
                            aux++;
                            //System.out.println("la posiscion s " +j );
                            
                        }
                        

                    }
                    String bin = Binario((int)(letra));
                    if(bin.length()==7)
                    {cadenabinario.add("0"+ Binario((int) (letra)));}
                    else if(bin.length()==6)
                        {cadenabinario.add("00"+ Binario((int) (letra)));}
                    else if(bin.length()==8)
                    {cadenabinario.add(""+Binario((int)(letra)));}
                    
                    codigoBinario = codigoBinario + Binario ((int) (letra))+" = "+ letra +" " + " , "  ;
                    if(contadorerror==0)
                        
                    {
                        
                        
                        jLabel9.setText("la frase es correcta ");
                        
                        
                        
                        
                        
                
                    }
                    
              
                if(contadorerror>=1)
                    {
                        jLabel9.setText("la frase es incorrecta ");
                        
                        
                        
                    
                
                
                
                String conca="";
                String fori="";
                for (int x =0; x<texto.length(); x++)
                {
                    if(ERRORES[x] == '1')
                    {
                        fori=fori+x+",";
                        conca=conca+palabrafrase[x]+",";
                        // jLabel4.setText("Error en la posicion "+" "+x+" "+"La letra deveria ser "+" "+palabrafrase[x]);
                        jLabel9.setText("Error en la posicion "+" "+fori+""+"La letra deveria ser "+""+conca+"");

                        //System.out.println("ERROR EN LA POSICION "+x+" LA LETRA DEBERIA DE SER "+palabrafrase[x]);
                    }
                    //jLabel4.setText(conca);

                }
                            
                }
                       
               
                  
                    //codigoBinario = codigoBinario + "g" ;
                }
              
                   cadenabinario.add("01000110001100010110111001100001");
                
                
                
                
                           int n;
		
		ArrayList<String> arreglo = new ArrayList<String>();
                arreglo.add("1010010");
                arreglo.add("1100101");
                arreglo.add("1100100");
                arreglo.add("1100101");
                arreglo.add("1110011");
                arreglo.add("0100000");
                arreglo.add("1100100");
                arreglo.add("1100101");
                arreglo.add("0100000");
                arreglo.add("1000011");
                arreglo.add("1101111");
                arreglo.add("1101101");
                arreglo.add("1110000");
                arreglo.add("1110101");
                arreglo.add("1110100");
                arreglo.add("1100001");
                arreglo.add("1100100");
                arreglo.add("1101111");                      
                arreglo.add("1110010");
                arreglo.add("1100001");
                arreglo.add("1110011");
                                                    
                                                    
                
                for(int j=0; j<arreglo.size(); j++)
                {
               int  ta = arreglo.get(j).length();
                int datas[] = new int[ta];
                char[] cadena = arreglo.get(j).toCharArray();
                int contador=0;
                for(char cad:cadena)
                {
                    datas[contador]=Character.getNumericValue(cad);
                    contador++;
                }
                
                
                  int divi[]=new int [5];
                divi[0]=1;
                 divi[1]=0;
                  divi[2]=1;
                   divi[3]=0;
                    divi[4]=1;
                    
                    
                   
                
                
                
        // Divide the inputted data by the inputted divisor
		// Store the remainder that is returned by the method
		int remainder[] = divide(datas, divi);
		for(int i=0 ; i < remainder.length-1 ; i++) {
			System.out.print(remainder[i]);
		}
		System.out.println("\n el CRC generado es :");
                //jLabel4.setText("el crc generado es  ");
		String crc2="";
		for(int i=0 ; i < datas.length ; i++) {
			System.out.print(datas[i]);
                        crc2= crc2+datas[i];
                         // jLabel5.setText(" "+crc2);
                        
		}
                String crc3="";
		for(int i=0 ; i < remainder.length-1 ; i++) {
                    crc3=crc3+remainder[i];
			System.out.print(remainder[i]);
                         // jLabel6.setText(" "+crc3);
                        // jLabel4.setText("Error en la posicion "+" "+x+" "+"La letra deveria ser "+" "+palabrafrase[x]);
		}
		System.out.println();
                int contador1=0;
                    jLabel3.setText("el crc generado es  "+crc2+crc3 );
                  jLabel4.setText("el crc generado es  "+crc2+crc3 );
                }
                
  
                           destino.setText(codigoBinario);/*imprime el codigo binario completo*/
        destino.append("\n Cadena completa: ");
        for(int x=0; x<cadenabinario.size();x++)
                {
                    destino.append("\n"+cadenabinario.get(x));
                }    
     
                  
                    
                
            
            //}
            
            
            
                //}  //  FIN DE IF COMPROBACION
            //FIN DE IF DE TAM==&
        if(tam <=21)
        {
//es la que ingresa 
 //ca           
       
            jLabel9.setText("Error la frase es muy corta");
        }

        else if(tam >=23)
        {
              
           for (int i = 0; i < texto.length(); i++)

            {

                //recorre el texto ingresado
                char letra = texto.charAt(i);//separa letra a letra

                int aux = Binario((int) (letra)).length();//almacena largo del binario d ela letra devuelta
                for (int j = 0; j < 8; j++) {//recorrido de 8 characteres
                    if (aux < 8) {//si el largo del binario es menor a 7 (0-7)entonces

                        codigoBinario = codigoBinario + "0";//agregar 0 a la concadenacion
                        aux++;
                        //System.out.println("la posiscion s " +j );

                    }

                }

                codigoBinario = codigoBinario + Binario ((int) (letra))+" = "+ letra +" " + " ; "  ;
                //  jLabel4.setText("la frase es correcta ");
                //codigoBinario = codigoBinario + "g" ;
                

                
                
            }

            jLabel9.setText(" error la frase es muy larga ");
         
         
           if(contadorerror>=1)
                    {
                       
                        
                    
                
                
                
                String co="";
                String fo="";
                for (int x =0; x<texto.length(); x++)
                {
                    if(ERRORES[x] == '1')
                    {
                        fo=fo+x+",";
                        co=co+palabrafrase[x]+",";
                        // jLabel4.setText("Error en la posicion "+" "+x+" "+"La letra deveria ser "+" "+palabrafrase[x]);
                        jLabel9.setText("la cadena es muy larga, Error en la posicion "+" "+fo+""+"Los caracteres de mas son: "+co);

                       //System.out.println("ERROR EN LA POSICION "+x+" LA LETRA DEBERIA DE SER "+palabrafrase[x]);
                    }
                    //jLabel4.setText(conca);

                }
                            
                } 

            
            
        }

     
        
    }//GEN-LAST:event_BtnTextBinActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
     String texto = origen.getText();
     jTextArea2.setText(" ");
        destino.setText("");
        Boolean error = false;
        //String texto = "";
        //char[] letra;
        //  char [] letra = texto.toCharArray();
        //String texto="puto";
        String codigoBinario = "";//guarda el en binario
        // char letra;
        int contadorerror =0;
        int tam = texto.length();
        int divi[]=new int [5];
                divi[0]=1;
                 divi[1]=0;
                  divi[2]=1;
                   divi[3]=0;
                    divi[4]=1;

      
           //if (texto.equals("Redes "))  {
                char[] textos = texto.toCharArray();
                char ERRORES[] = new char[80];
                char[] palabrafrase = frase.toCharArray();
                ArrayList<String> cadenabinario = new ArrayList<String>();
                ArrayList<String> arreglo = new ArrayList<String>();
                
                   arreglo.add("00110001011011100011000101100011");//protocolo inicio
            for (char sali : palabrafrase)
            {
                if(String.valueOf(Integer.toBinaryString(sali)).length() == 7)
                {
                arreglo.add("0"+Integer.toBinaryString(sali));
                }
                else
                {
                arreglo.add("00"+Integer.toBinaryString(sali));
                }
            }
            arreglo.add("01000110001100010110111001100001");//protocolo fin
                
             jLabel2.setText("Frase correcta");
                
            destino.append("Frase en binario \n");
            cadenabinario.add("00110001011011100011000101100011");
            for (char sali : textos)
            {
                if(String.valueOf(Integer.toBinaryString(sali)).length() == 7)
                {
                cadenabinario.add("0"+Integer.toBinaryString(sali));
                destino.append("0"+Integer.toBinaryString(sali)+"\n");
                }
                else
                {
                cadenabinario.add("00"+Integer.toBinaryString(sali));
                destino.append("00"+Integer.toBinaryString(sali)+"\n");
                }                      
                    
            }                
            cadenabinario.add("01000110001100010110111001100001");
                

                if(cadenabinario.size()==arreglo.size())
                {
                    for(int i=0; i<cadenabinario.size(); i++)
                    {
                        if(!cadenabinario.get(i).equals(arreglo.get(i)))
                        {
                            error=true;
                            int charcode = Integer.parseInt(arreglo.get(i),2);
                            String str = new Character((char)charcode).toString();
                            destino.append("ERROR en posicion "+i+" Debe ser "+str+"\n");
                               jLabel2.setText("Error en la posicion"+i+"El caracter deve ser "+str+"");
                            
                        }
                    }
                }
                else if(cadenabinario.size()<arreglo.size())
                {
                    int contaerror=0;
                    error = true;
                    for(int i=0; i<(cadenabinario.size()-1); i++)
                    {
                        
                        if(!cadenabinario.get(i).equals(arreglo.get(i)))
                        {
                            contaerror++;
                            int charcode = Integer.parseInt(arreglo.get(i),2);
                            String str = new Character((char)charcode).toString();
                            destino.append("ERROR en posicion "+i+" Debe ser "+str+"\n");  
                               jLabel2.setText("Error en la posicion "+i+"el caracter deve ser "+str+"\n");
                        }                                                
                    }
                    if(contaerror<1)
                    {
                        destino.append("FRASE CORRECTA, PERO MUY CORTA \n");
                           jLabel2.setText("FRASE CORRECTA, PERO MUY CORTA \n");
                    }
                    destino.append("LE FALTARON "+(arreglo.size()-cadenabinario.size())+" CARACTERES \n");
                     jLabel5.setText("Le faltaron "+(arreglo.size()-cadenabinario.size())+" caracteres \n");
                }
                
                else if(cadenabinario.size()>arreglo.size())
                {
                    int contaerror=0;
                    error = true;
                    for(int i=0; i<(arreglo.size()-1); i++)
                    {
                        
                        if(!cadenabinario.get(i).equals(arreglo.get(i)))
                        {
                            contaerror++;
                            int charcode = Integer.parseInt(arreglo.get(i),2);
                            String str = new Character((char)charcode).toString();
                            destino.append("ERROR en posicion "+i+" Debe ser "+str+"\n");  
                             jLabel2.setText("Error en la posicion"+i+" el caracter deve ser "+str+" \n");
                        }                                                
                    }
                    if(contaerror<1)
                    {
                        destino.append("FRASE CORRECTA, PERO MUY LARGA \n");
                         jLabel2.setText("Frase correcta pero muy larga \n");
                    }
                    destino.append("TIENE "+(cadenabinario.size()-arreglo.size())+" CARACTERES ADICIONALES \n");
                     jLabel5.setText("Tiene "+(cadenabinario.size()-arreglo.size())+" caracteres adicionales \n");
                }
                
                if(error == false)
                {
                    for(int i=1; i<arreglo.size()-1; i++)
                    {
                        int charcode = Integer.parseInt(arreglo.get(i),2);
                        String str = new Character((char)charcode).toString();
                        jTextArea2.append(str);
                    }
                }
                
                           int n;
		
		                                                                                                                       
                for(int j=0; j<arreglo.size(); j++)
                {
               int  ta = arreglo.get(j).length();
                int datas[] = new int[ta];
                char[] cadena = arreglo.get(j).toCharArray();
                int contador=0;
                for(char cad:cadena)
                {
                    datas[contador]=Character.getNumericValue(cad);
                    contador++;
                }
                
                
                  
                    
                    
                   
                
                
                
        // Divide the inputted data by the inputted divisor
		// Store the remainder that is returned by the method
		int remainder[] = divide(datas, divi);
		for(int i=0 ; i < remainder.length-1 ; i++) {
			//destino.append(""+remainder[i]);
		}
		
                //jLabel4.setText("el crc generado es  ");
		String crc2="";
		for(int i=0 ; i < datas.length ; i++) {
			System.out.print(datas[i]);
                        crc2= crc2+datas[i];
                         // jLabel5.setText(" "+crc2);
                        
		}
                String crc3="";
		for(int i=0 ; i < remainder.length-1 ; i++) {
                    crc3=crc3+remainder[i];
			//destino.append("\n"+remainder[i]);
                         // jLabel6.setText(" "+crc3);
                        // jLabel4.setText("Error en la posicion "+" "+x+" "+"La letra deveria ser "+" "+palabrafrase[x]);
		}
		System.out.println();
                int contador1=0;
                   // jLabel3.setText("el crc generado es  "+crc2+crc3 );
                //  jLabel4.setText("el crc generado es  "+crc2+crc3 );
                }
                
  
/*                           destino.setText(codigoBinario);/*imprime el codigo binario completo
        destino.append("\n Cadena completa: ");
        for(int x=0; x<cadenabinario.size();x++)
                {
                    destino.append("\n"+cadenabinario.get(x));
                }    
     
*/               
                    
                
            
            //}
            
            
            
                //}  //  FIN DE IF COMPROBACION
            //FIN DE IF DE TAM==&
        

     



        // TODO add your handling code here:

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

     String texto = origen.getText();
     jTextArea1.setText(" ");
       destino.setText(""); 
        Boolean error = false;
        //String texto = "";
        //char[] letra;
        //  char [] letra = texto.toCharArray();
        //String texto="puto";
        String codigoBinario = "";//guarda el en binario
        // char letra;
        int contadorerror =0;
        int tam = texto.length();
        int divi[]=new int [5];
                divi[0]=1;
                 divi[1]=0;
                  divi[2]=1;
                   divi[3]=0;
                    divi[4]=1;

      
           //if (texto.equals("Redes "))  {
                char[] textos = texto.toCharArray();
                char ERRORES[] = new char[80];
                char[] palabrafrase = frase.toCharArray();
                ArrayList<String> cadenabinario = new ArrayList<String>();
                ArrayList<String> arreglo = new ArrayList<String>();
                
                   arreglo.add("00110001011011100011000101100011");
            for (char sali : palabrafrase)
            {
                if(String.valueOf(Integer.toBinaryString(sali)).length() == 7)
                {
                arreglo.add("0"+Integer.toBinaryString(sali));
                }
                else
                {
                arreglo.add("00"+Integer.toBinaryString(sali));
                }
            }
            arreglo.add("01000110001100010110111001100001");
                
                
            destino.append("Frase en binario \n");
             jLabel2.setText("Frase correcta");
            cadenabinario.add("00110001011011100011000101100011");
            for (char sali : textos)
            {
                if(String.valueOf(Integer.toBinaryString(sali)).length() == 7)
                {
                cadenabinario.add("0"+Integer.toBinaryString(sali));
                destino.append("0"+Integer.toBinaryString(sali)+"\n");
                }
                else
                {
                cadenabinario.add("00"+Integer.toBinaryString(sali));
                destino.append("00"+Integer.toBinaryString(sali)+"\n");
                }                      
                    
            }                
            cadenabinario.add("01000110001100010110111001100001");
                

                if(cadenabinario.size()==arreglo.size())
                {
                    for(int i=0; i<cadenabinario.size(); i++)
                    {
                        if(!cadenabinario.get(i).equals(arreglo.get(i)))
                        {
                            error=true;
                            int charcode = Integer.parseInt(arreglo.get(i),2);
                            String str = new Character((char)charcode).toString();
                            destino.append("ERROR en posicion "+i+" Debe ser "+str+"\n");
                             jLabel2.setText("Error en la posicion"+i+"el caracter deve ser "+str+" " );
                            
                        }
                    }
                }
                else if(cadenabinario.size()<arreglo.size())
                {
                    int contaerror=0;
                    error = true;
                    for(int i=0; i<(cadenabinario.size()-1); i++)
                    {
                        
                        if(!cadenabinario.get(i).equals(arreglo.get(i)))
                        {
                            contaerror++;
                            int charcode = Integer.parseInt(arreglo.get(i),2);
                            String str = new Character((char)charcode).toString();
                            destino.append("ERROR en posicion "+i+" Debe ser "+str+"\n"); 
                            jLabel2.setText("Error en la posicion "+i+" el caracter deve ser "+str+" " );
                        }                                                
                    }
                    if(contaerror<1)
                    {
                        destino.append("FRASE CORRECTA, PERO MUY CORTA \n");
                        jLabel2.setText("Frase correcta pero muy corta " );
                    }
                    destino.append("LE FALTARON "+(arreglo.size()-cadenabinario.size())+" CARACTERES \n");
                        jLabel5.setText("Le Faltaron " +(arreglo.size()-cadenabinario.size())+" Caracteres ");
                }
                
                else if(cadenabinario.size()>arreglo.size())
                {
                    int contaerror=0;
                    error = true;
                    for(int i=0; i<(arreglo.size()-1); i++)
                    {
                        
                        if(!cadenabinario.get(i).equals(arreglo.get(i)))
                        {
                            contaerror++;
                            int charcode = Integer.parseInt(arreglo.get(i),2);
                            String str = new Character((char)charcode).toString();
                            destino.append("ERROR en posicion "+i+" Debe ser "+str+"\n"); 
                              jLabel2.setText("error en la posicion"+i+"El caracter deve ser"+str );
                        }                                                
                    }
                    if(contaerror<1)
                    {
                        destino.append("FRASE CORRECTA, PERO MUY LARGA \n");
                          jLabel2.setText("Frase correcta pero muy larga " );
                    }
                    destino.append("TIENE "+(cadenabinario.size()-arreglo.size())+" CARACTERES ADICIONALES \n");
                      jLabel5.setText("Tiene" +(cadenabinario.size()-arreglo.size())+" Caracteres de mas \n");
                }
                
                if(error == false)
                {
                    for(int i=1; i<arreglo.size()-1; i++)
                    {
                        int charcode = Integer.parseInt(arreglo.get(i),2);
                        String str = new Character((char)charcode).toString();
                        jTextArea1.append(str);
                   
                    }
                }
                
                           int n;
		
		                                                                                                                       
                for(int j=0; j<arreglo.size(); j++)
                {
               int  ta = arreglo.get(j).length();
                int datas[] = new int[ta];
                char[] cadena = arreglo.get(j).toCharArray();
                int contador=0;
                for(char cad:cadena)
                {
                    datas[contador]=Character.getNumericValue(cad);
                    contador++;
                }
                
                
                  
                    
                    
                   
                
                
                
        // Divide the inputted data by the inputted divisor
		// Store the remainder that is returned by the method
		int remainder[] = divide(datas, divi);
		for(int i=0 ; i < remainder.length-1 ; i++) {
			//destino.append(""+remainder[i]);
		}
		
                //jLabel4.setText("el crc generado es  ");
		String crc2="";
		for(int i=0 ; i < datas.length ; i++) {
			System.out.print(datas[i]);
                        crc2= crc2+datas[i];
                         // jLabel5.setText(" "+crc2);
                        
		}
                String crc3="";
		for(int i=0 ; i < remainder.length-1 ; i++) {
                    crc3=crc3+remainder[i];
			//destino.append("\n"+remainder[i]);
                         // jLabel6.setText(" "+crc3);
                        // jLabel4.setText("Error en la posicion "+" "+x+" "+"La letra deveria ser "+" "+palabrafrase[x]);
		}
		System.out.println();
                int contador1=0;
                  



//  jLabel3.setText("el crc generado es  "+crc2+crc3 );
                 
                }
                
                
  
/*                           destino.setText(codigoBinario);/*imprime el codigo binario completo
        destino.append("\n Cadena completa: ");
        for(int x=0; x<cadenabinario.size();x++)
                {
                    destino.append("\n"+cadenabinario.get(x));
                }    
     
*/               
                    
                
            
            //}
            
            
            
                //}  //  FIN DE IF COMPROBACION
            //FIN DE IF DE TAM==&
        

     



        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
   String Mensaje = origen.getText();  
   frase = Mensaje;
   



        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed
    
    
    
    
    
       public int[] divide(int old_data[], int divisor[]) {
		int remainder[] , i;
		int data[] = new int[old_data.length + divisor.length];
		System.arraycopy(old_data, 0, data, 0, old_data.length);
		// Remainder array stores the remainder
		remainder = new int[divisor.length];
		// Initially, remainder's bits will be set to the data bits
		System.arraycopy(data, 0, remainder, 0, divisor.length);
		
		// Loop runs for same number of times as number of bits of data
		// This loop will continuously exor the bits of the remainder and
		// divisor
		for(i=0 ; i < old_data.length ; i++) {
			destino.append((i+1) + ".) bit de datos es : "
								+ remainder[0]+"\n");
			destino.append("Sobrante : ");
			if(remainder[0] == 1) {
				// We have to exor the remainder bits with divisor bits
				for(int j=1 ; j < divisor.length ; j++) {
					remainder[j-1] = exor(remainder[j], divisor[j]);
					destino.append(remainder[j-1]+"\n");
				}
			}
			else {
				// We have to exor the remainder bits with 0
				for(int j=1 ; j < divisor.length ; j++) {
					remainder[j-1] = exor(remainder[j], 0);
					destino.append(remainder[j-1]+"\n");
				}
			}
			// The last bit of the remainder will be taken from the data
			// This is the 'carry' taken from the dividend after every step
			// of division
			remainder[divisor.length-1] = data[i+divisor.length];
			System.out.println(remainder[divisor.length-1]);
		}
                for(i=0 ; i < old_data.length ; i++)
                {
                    destino.append(""+old_data[i]);
                }
                for(i=0 ; i < remainder.length ; i++)
                {
                    destino.append(""+remainder[i]);
                }
                destino.append("\n");
		return remainder;
	}
	
	static int exor(int a, int b) {
		// This simple function returns the exor of two bits
		if(a == b) {
			return 0;
		}
		return 1;
	}
    
    
    /*
    
      static int[] divide(int dividendo[],int largo_p[], int resto[])
     {
        int contador=0;
        while(true)
        {
            for(int i=0;i<largo_p.length;i++)
                resto[contador+i]=(resto[contador+i]^largo_p[i]);
            
            while(resto[contador]==0 && contador!=resto.length-1)
                contador++;
    
            if((resto.length-contador)<largo_p.length)
                break;
        }
       
        return resto;
     
        
    }
    */
    
    
    
    
    
       private String Binario(int Decimal) {
        int R, x = 0;//variables que se implementaran
        String Binario = ""; //guarda el contenido en codigo binario
        R = Decimal % 2;//resto del parametro 
        if (R == 1) {//si el resto es 1
            while (Decimal > 1) {//si el parametro es mas grande q el resto
                Decimal /= 2;//entonces decimal se divide en 2 y se guarda en decimal
                x = Decimal % 2;//x contendra el resto del decimal
                Binario = String.valueOf(x + Binario);//binario se ira formando de forma correcta y no alreves
            }
        } else {//si resto no es 1
            while (Decimal > 0) {//y decimal es mayor a 0
                Decimal /= 2;//decimal se divide en 2
                x = Decimal % 2;//x contendra el resto del decimal resultante
                Binario = String.valueOf(x + Binario);//se forma el numero en binario de forma correcta
            }
        }
        return String.valueOf(Binario + x);//devuelve el binario resultante mas el ultimo bit
    }

    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnTextBin;
    private javax.swing.JTextArea destino;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea origen;
    // End of variables declaration//GEN-END:variables
}
